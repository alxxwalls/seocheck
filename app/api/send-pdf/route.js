// /app/api/send-pdf/route.js
export const runtime = "nodejs";

import React from "react";
import { Resend } from "resend";
import {
  Document,
  Page,
  Text,
  View,
  StyleSheet,
  renderToBuffer, // <-- use this
} from "@react-pdf/renderer";

/* ---------- CORS ---------- */
const ALLOWED =
  (process.env.CORS_ALLOWED_ORIGINS || "")
    .split(",")
    .map((s) => s.trim())
    .filter(Boolean);

function allowOrigin(req) {
  const origin = req.headers.get("origin");
  if (!origin) return "*";
  if (ALLOWED.length === 0 || ALLOWED.includes("*")) return "*";
  return ALLOWED.includes(origin) ? origin : ALLOWED[0];
}

function corsHeaders(req) {
  return {
    "Access-Control-Allow-Origin": allowOrigin(req),
    "Access-Control-Allow-Methods": "POST,OPTIONS",
    "Access-Control-Allow-Headers": "Content-Type, Authorization",
    "Access-Control-Max-Age": "86400",
    Vary: "Origin",
  };
}

export async function OPTIONS(request) {
  return new Response(null, { status: 204, headers: corsHeaders(request) });
}

/* ---------- PDF ---------- */
const styles = StyleSheet.create({
  page: { padding: 36, fontSize: 12 },
  h1: { fontSize: 18, fontWeight: 700, marginBottom: 8 },
  h2: { fontSize: 14, fontWeight: 700, marginTop: 14, marginBottom: 6 },
  p: { marginBottom: 4, lineHeight: 1.4 },
  row: { marginBottom: 2 },
});

function pct(v) {
  if (typeof v !== "number") return "-";
  return `${Math.round(v * 100)}%`;
}

function AuditPdf({ url, metaTitle, metaDescription, score, catScores }) {
  return (
    <Document>
      <Page size="A4" style={styles.page}>
        <Text style={styles.h1}>SEO Audit Snapshot</Text>

        <View style={{ marginBottom: 10 }}>
          <Text style={styles.p}>URL: {url || "-"}</Text>
          <Text style={styles.p}>Meta title: {metaTitle || "-"}</Text>
          <Text style={styles.p}>Meta description: {metaDescription || "-"}</Text>
        </View>

        <Text style={styles.h2}>Score</Text>
        <View>
          <Text style={styles.row}>
            Overall: {Number.isFinite(score) ? score : "-"}
          </Text>
          {catScores ? (
            <>
              <Text style={styles.row}>SEO: {pct(catScores.SEO)}</Text>
              <Text style={styles.row}>Performance: {pct(catScores.PERFORMANCE)}</Text>
              <Text style={styles.row}>Security: {pct(catScores.SECURITY)}</Text>
            </>
          ) : null}
        </View>

        <Text style={styles.p}>{`\nGenerated by Lekker Marketing`}</Text>
      </Page>
    </Document>
  );
}

/* ---------- POST ---------- */
export async function POST(request) {
  const headers = { "Content-Type": "application/json", ...corsHeaders(request) };

  try {
    const body = await request.json().catch(() => ({}));
    const p = body?.payload && typeof body.payload === "object" ? body.payload : body;

    const to = body?.email || p?.email;
    if (!to) {
      return new Response(JSON.stringify({ ok: false, errors: ["Missing email"] }), {
        status: 400,
        headers,
      });
    }

    const url = p.url || p.finalUrl || p.normalizedUrl || "";
    const metaTitle = p.metaTitle || p.title || "";
    const metaDescription = p.metaDescription || "";
    const score = Number.isFinite(p.overall) ? p.overall : null;
    const catScores = p.catScores || null;

    // ✅ Build a real Buffer with renderToBuffer (no circular refs)
    const pdfBuffer = await renderToBuffer(
      <AuditPdf
        url={url}
        metaTitle={metaTitle}
        metaDescription={metaDescription}
        score={score}
        catScores={catScores}
      />
    );

    const resendKey = process.env.RESEND_API_KEY;
    const from = process.env.FROM_EMAIL;
    if (!resendKey || !from) {
      return new Response(
        JSON.stringify({ ok: false, errors: ["Server misconfigured: missing RESEND_API_KEY or FROM_EMAIL"] }),
        { status: 500, headers }
      );
    }

    const resend = new Resend(resendKey);

    // Option A: send Buffer directly
    await resend.emails.send({
      from,
      to,
      subject: "Your SEO Audit PDF",
      text: `Hi,\n\nAttached is your SEO audit snapshot for: ${url || "your site"}.\n\n— Lekker Marketing`,
      attachments: [
        {
          filename: "seo-audit.pdf",
          content: pdfBuffer,                // Buffer
          contentType: "application/pdf",
        },
      ],
    });

    // If your Resend version requires base64 instead of Buffer, swap the block above for:
    //
    // const base64 = pdfBuffer.toString("base64");
    // await resend.emails.send({
    //   from,
    //   to,
    //   subject: "Your SEO Audit PDF",
    //   text: `Hi,\n\nAttached is your SEO audit snapshot for: ${url || "your site"}.\n\n— Lekker Marketing`,
    //   attachments: [
    //     { filename: "seo-audit.pdf", content: base64, encoding: "base64", contentType: "application/pdf" },
    //   ],
    // });

    return new Response(JSON.stringify({ ok: true }), { status: 200, headers });
  } catch (err) {
    return new Response(
      JSON.stringify({ ok: false, errors: [err?.message || "Unknown error"] }),
      { status: 500, headers }
    );
  }
}
