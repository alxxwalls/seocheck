// /app/api/send-pdf/route.js
export const runtime = "nodejs";

import React from "react";
import { Resend } from "resend";
import {
  Document,
  Page,
  Text,
  View,
  StyleSheet,
  pdf,
} from "@react-pdf/renderer";

/* ---------- CORS helpers ---------- */
const ALLOWED =
  (process.env.CORS_ALLOWED_ORIGINS || "")
    .split(",")
    .map((s) => s.trim())
    .filter(Boolean);

function resolveAllowOrigin(req) {
  const origin = req.headers.get("origin");
  if (!origin) return "*";
  if (ALLOWED.length === 0) return "*"; // default permissive (no credentials used)
  if (ALLOWED.includes("*")) return "*";
  return ALLOWED.includes(origin) ? origin : ALLOWED[0]; // fallback to first allowed
}

function corsHeaders(req) {
  return {
    "Access-Control-Allow-Origin": resolveAllowOrigin(req),
    "Access-Control-Allow-Methods": "POST,OPTIONS",
    "Access-Control-Allow-Headers": "Content-Type, Authorization",
    "Access-Control-Max-Age": "86400",
    Vary: "Origin",
  };
}

/* ---------- PDF doc ---------- */
const styles = StyleSheet.create({
  page: { padding: 36, fontSize: 12 },
  h1: { fontSize: 18, fontWeight: 700, marginBottom: 8 },
  h2: { fontSize: 14, fontWeight: 700, marginTop: 14, marginBottom: 6 },
  p: { marginBottom: 4, lineHeight: 1.4 },
  row: { marginBottom: 2 },
});

function AuditPdf({ url, metaTitle, metaDescription, score, catScores }) {
  return (
    <Document>
      <Page size="A4" style={styles.page}>
        <Text style={styles.h1}>SEO Audit Snapshot</Text>
        <View style={{ marginBottom: 10 }}>
          <Text style={styles.p}>URL: {url || "-"}</Text>
          <Text style={styles.p}>Meta title: {metaTitle || "-"}</Text>
          <Text style={styles.p}>Meta description: {metaDescription || "-"}</Text>
        </View>

        <Text style={styles.h2}>Score</Text>
        <View>
          <Text style={styles.row}>Overall: {Number.isFinite(score) ? score : "-"}</Text>
          {catScores ? (
            <>
              <Text style={styles.row}>SEO: {formatPct(catScores.SEO)}</Text>
              <Text style={styles.row}>Performance: {formatPct(catScores.PERFORMANCE)}</Text>
              <Text style={styles.row}>Security: {formatPct(catScores.SECURITY)}</Text>
            </>
          ) : null}
        </View>

        <Text style={styles.p}>{`\nGenerated by Lekker Marketing`}</Text>
      </Page>
    </Document>
  );
}

function formatPct(v) {
  if (typeof v !== "number") return "-";
  return `${Math.round(v * 100)}%`;
}

/* ---------- OPTIONS (preflight) ---------- */
export async function OPTIONS(request) {
  return new Response(null, {
    status: 204,
    headers: corsHeaders(request),
  });
}

/* ---------- POST (send email with PDF) ---------- */
export async function POST(request) {
  const headers = {
    "Content-Type": "application/json",
    ...corsHeaders(request),
  };

  try {
    const body = await request.json().catch(() => ({}));
    // Accept either flattened fields or nested under `payload`
    const p = body?.payload && typeof body.payload === "object" ? body.payload : body;

    const email = body?.email || p?.email;
    if (!email) {
      return new Response(JSON.stringify({ ok: false, errors: ["Missing email"] }), {
        status: 400,
        headers,
      });
    }

    // Extract fields you send from the widget
    const url = p.url || p.finalUrl || p.normalizedUrl || "";
    const metaTitle = p.metaTitle || p.title || "";
    const metaDescription = p.metaDescription || "";
    const score = Number.isFinite(p.overall) ? p.overall : null;
    const catScores = p.catScores || null;

    // Build PDF
    const doc = (
      <AuditPdf
        url={url}
        metaTitle={metaTitle}
        metaDescription={metaDescription}
        score={score}
        catScores={catScores}
      />
    );
    const pdfBuffer = await pdf(doc).toBuffer();

    // Email via Resend
    const resendKey = process.env.RESEND_API_KEY;
    const from = process.env.FROM_EMAIL;
    if (!resendKey || !from) {
      return new Response(
        JSON.stringify({ ok: false, errors: ["Server misconfigured: missing RESEND_API_KEY or FROM_EMAIL"] }),
        { status: 500, headers }
      );
    }

    const resend = new Resend(resendKey);

    await resend.emails.send({
      from,
      to: email,
      subject: "Your SEO Audit PDF",
      text: `Hi,\n\nAttached is your SEO audit snapshot for: ${url || "your site"}.\n\nâ€” Lekker Marketing`,
      attachments: [
        {
          filename: "seo-audit.pdf",
          content: pdfBuffer,
        },
      ],
    });

    return new Response(JSON.stringify({ ok: true }), { status: 200, headers });
  } catch (err) {
    return new Response(
      JSON.stringify({ ok: false, errors: [err?.message || "Unknown error"] }),
      { status: 500, headers }
    );
  }
}
